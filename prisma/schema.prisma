// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique

  createdSubZeddits SubZeddit[]    @relation("CreatedBy")
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  commentVotes      CommentVote[]
  votes             Vote[]
  subscriptions     Subscription[]
}

model SubZeddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String?

  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  posts       Post[]
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  userId      String
  subZedditId String

  user      User      @relation(fields: [userId], references: [id])
  subZeddit SubZeddit @relation(fields: [subZedditId], references: [id], onDelete: Cascade)

  @@id([userId, subZedditId])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subZedditId String
  authorId    String

  subZeddit SubZeddit @relation(fields: [subZedditId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  votes     Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  authorId  String
  postId    String
  replyToId String?
  commentId String?
  createdAt DateTime @default(now())

  author  User          @relation(fields: [authorId], references: [id])
  post    Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[]     @relation("ReplyTo")
  votes   CommentVote[]
}

model Vote {
  userId String
  postId String

  type VoteType
  post Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

enum VoteType {
  UP
  DOWN
}

model CommentVote {
  userId    String
  commentId String

  comment Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type    VoteType
  user    User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}
